import java.util.Properties

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    `maven-publish`
    signing
    alias(libs.plugins.dokka)
}


val localProps = Properties()
val localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.inputStream().use { localProps.load(it) }
}



android {
    namespace = "com.anonymous.xlinearcalendar"
    compileSdk = 36

    publishing {
        singleVariant("release") {
            withSourcesJar() // Highly recommended to include source code
            withJavadocJar() // This ensures the documentation generated by Dokka is packaged
        }
    }


    defaultConfig {
        minSdk = 21

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
    }
}

// 2. CONFIGURE SIGNING (FIXED: Conditional configuration to avoid 'no configured signatory' error when properties are missing)
signing {
    // Check if the required properties exist. We use project.findProperty here
    // instead of the strict projectProperty helper to allow signing to be optional
    // when running local/non-publishing tasks.
    val keyId = project.findProperty("signing.keyId")?.toString()
    val password = project.findProperty("signing.password")?.toString()
    val secretKeyRingFilePath = project.findProperty("SIGNING.secretKeyRingFile")?.toString()

    if (keyId != null && password != null && secretKeyRingFilePath != null) {
        // Only configure signing if all necessary properties are present.
        // If the key ring file path exists, read its content.
        val secretKeyRingFile = file(secretKeyRingFilePath)

        if (secretKeyRingFile.exists()) {
            useInMemoryPgpKeys(keyId, password, secretKeyRingFile.readText())
            // Tell the signing plugin to sign all publications configured below.
            sign(publishing.publications)
            logger.lifecycle("Artifact signing configured successfully.")
        } else {
            logger.warn("SIGNING_SECRET_KEY_RING_FILE found, but file not found at path: $secretKeyRingFilePath. Skipping artifact signing.")
        }
    } else {
        logger.lifecycle("Signing properties (SIGNING_KEY_ID, SIGNING_PASSWORD, SIGNING_SECRET_KEY_RING_FILE) not found. Skipping artifact signing.")
    }
}

tasks.register<Zip>("stuffZip") {
    archiveBaseName = "stuff"
    from("src/stuff")
}


tasks.withType<org.jetbrains.dokka.gradle.DokkaTask>().configureEach {
    dokkaSourceSets {
        configureEach {
            // Your configuration here
        }
    }
}


dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.compose.ui)
    implementation(libs.androidx.compose.ui.graphics)
    implementation(libs.androidx.compose.ui.tooling.preview)
    implementation(libs.androidx.compose.material3)
    implementation(libs.bundles.android.lifecycle)
    implementation(libs.kotlinx.datetime)
}

afterEvaluate {
    publishing {
        publications {
            create<MavenPublication>("release") {
                groupId = "com.anonymous"
                artifactId = "xlinearcalendar"
                version = "1.0.0"

                // Get the artifacts from the default 'release' build variant
                from(components["release"])

                pom {
                    name.set("XLinearCalendar")
                    description.set("A Jetpack Compose Linear + Grid Calendar library")
                    url.set("https://github.com/TuleSimon/XCalendar") // update URL
                    licenses {
                        license {
                            name.set("The Apache License, Version 2.0")
                            url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                        }
                    }
                    developers {
                        developer {
                            id.set("tulesimon")
                            name.set("Tule Simon")
                            email.set("tulesimon98@gmail.com")
                        }
                    }
                    scm {
                        connection.set("scm:git:git://github.com/TuleSimon/XCalendar.git")
                        developerConnection.set("scm:git:ssh://github.com/TuleSimon/XCalendar.git")
                        url.set("https://github.com/tuleSimon/XCalendar")
                    }
                }
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/TuleSimon/XCalendar")
                credentials {
                    username =  localProps.getProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                    password =  localProps.getProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}
